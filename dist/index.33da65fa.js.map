{"mappings":"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","sources":["public/script.js"],"sourcesContent":["// global variable shared across functions\nlet totalMovies = 0\nlet totalTime = 0\nlet movieExists = false\n\n// everytime the page is refreshed, the movies stya on the page\nwindow.addEventListener('load', () => {\n    reloadPage()\n})\n\n//-------------------------------------------------------------\n// API IMPLEMENTATION\nconst getApiResponse = (movieTitle, rating) => {\n    const apiKey = '3defedc0' \n    const baseUrl = 'http://www.omdbapi.com/'\n    const url = `${baseUrl}?apikey=${apiKey}&t=${encodeURIComponent(movieTitle)}`\n\n    fetch(url)\n    .then(response => {\n        if (response.ok) {\n            return response.json()\n        } else {\n            throw new Error('Request failed with status code: ' + response.status)\n        }\n    })\n    .then((data) => {\n        // check to see if the data has a poster\n        if (data.Poster === 'N/A') {\n            const inputContainer = document.querySelector('.input-container')\n            const p = document.createElement('p')\n            p.innerHTML = `${movieTitle} is not in the database`\n            inputContainer.appendChild(p)\n\n            // removes the error message after 4 seconds\n            setTimeout(() => {\n                p.remove()\n            }, 4000)\n\n            return\n\n        } else {\n            // output the data to the watched movies list\n            data.Rating = rating\n            let movies = JSON.parse(localStorage.getItem('movies'))\n\n            if (movies == null) {\n                movies = [data]\n            } else {\n                if (movies.some(movie => movie.Title === data.Title)) {\n                    console.log('Movie already in watched list');\n                } else {\n                    movies.push(data)\n\n                    // update the tracker\n                    totalMovies++\n                    totalTime += parseInt(data.Runtime)\n                    updateTracker(totalMovies, totalTime)\n                }\n            } \n\n            localStorage.setItem('movies', JSON.stringify(movies))\n\n            displayMovie() \n            displayShowPage()\n        }\n        \n        \n    })\n    .catch(error => {\n        console.error('Error:', error)\n    })\n}\n\n//-------------------------------------------------------------\n// INPUT AND API RESPONSE\n\nconst form = document.querySelector('form')\n\nform.addEventListener('submit', (event) => {\n    event.preventDefault()\n\n    const title = document.querySelector('input[name=\"title\"]').value\n    const rating = document.querySelector('#rating').value\n\n    getApiResponse(title, rating)\n    form.reset()\n\n    // focus on the title input after the form is submitted\n    const titleInput = document.querySelector('input[name=\"title\"]')\n    titleInput.focus()\n})\n\n//-------------------------------------------------------------\n// CREATE IMAGE POSTER AND TITLE \n\nconst createMovie = (movie) => {\n    \n    const watchedMovies = document.querySelector('.watched-movies')\n    const watchedMoviesList = document.querySelectorAll('.watched-movies div')\n\n    // check to see if the movie already exists in the DOM\n    let watchedMoviesArray = Array.from(watchedMoviesList);\n    let movieExists = watchedMoviesArray.some((watchedMovie) => watchedMovie.getAttribute('id') === movie.imdbID);\n\n\n    if (!movieExists) {\n        const div = document.createElement('div')\n        div.classList.add('movie')\n        div.setAttribute('id', movie.imdbID)\n        div.setAttribute('data-movie-target', '#show-page')\n        div.classList.add('active')\n\n        const img = document.createElement('img')\n        img.classList.add('movie-poster')\n        img.src = movie.Poster\n        img.alt = `${movie.Title} poster`\n\n        const title = document.createElement('h4')\n        title.innerHTML = movie.Title\n\n        div.appendChild(img)\n        div.appendChild(title)\n        watchedMovies.appendChild(div)\n\n    } \n}\n\n//-------------------------------------------------------------\n// RELOAD PAGE \n\nconst reloadPage = () => {\n    const movies = JSON.parse(localStorage.getItem('movies'))\n    const watchedMovies = document.querySelector('.watched-movies')\n    \n    // reset tracker\n    totalMovies = 0\n    totalTime = 0\n\n    if (movies !== null) {\n        movies.forEach((movie) => {\n            createMovie(movie)\n\n            totalMovies++\n            totalTime += parseInt(movie.Runtime)\n        })\n    }\n\n    updateTracker(totalMovies, totalTime)\n    displayShowPage()\n    showPageControls()\n}\n\n//-------------------------------------------------------------\n// UPDATE THE TRACKER INFO\n\n\nconst updateTracker = (movies, time) => {\n    const numMovies = document.querySelector('.num-movies p')\n    numMovies.innerHTML = movies\n\n    const watchTime= document.querySelector('.watch-time p')\n    watchTime.innerHTML = time\n}\n\n//-------------------------------------------------------------\n// DISPLAY THE MOVIES\n\nconst displayMovie = () => {\n    const movies = JSON.parse(localStorage.getItem('movies'))\n    const movie = movies.slice(-1)[0]\n\n    createMovie(movie)\n\n    \n}\n\n//-------------------------------------------------------------\n// DISPLAY MOVIE SHOW PAGE\n\nconst displayShowPage = () => {\n\n    // find which movie has been clicked on\n    const watchedMovies = document.querySelectorAll('.watched-movies div')\n    const pageContents = document.querySelectorAll('[data-page-content]')\n    const movies = JSON.parse(localStorage.getItem('movies')) \n    let movieInDatabase = ''\n\n    watchedMovies.forEach((movie) => {\n        movie.addEventListener('click', () => {\n\n            const movieId = movie.getAttribute('id')\n            movies.forEach((movie) => {\n                if (movie.imdbID === movieId) {\n                    movieInDatabase = movie\n                }\n            })\n            \n            const target = document.querySelector(movie.dataset.movieTarget)\n\n            pageContents.forEach((page) => {\n                page.classList.remove('active')\n            })\n\n            target.classList.add('active')\n\n            // specific show page based on the movie clicked\n            const content = document.querySelector('#show-page .img-title')\n            const img = document.createElement('img')\n\n            // delete the previous append to parent HTML element\n            content.innerHTML = ''\n\n            img.src = movieInDatabase.Poster\n            img.alt = `${movieInDatabase.Title} Poster`\n            const figcaption = document.createElement('figcaption')\n            figcaption.innerHTML = movieInDatabase.Title\n            content.appendChild(img)\n            content.appendChild(figcaption)\n\n            const rating = document.querySelector('#show-page .rating p')\n            const genre = document.querySelector('#show-page .genre p')\n            const releaseDate = document.querySelector('#show-page .release-date p')\n            const director = document.querySelector('#show-page .director p')\n            const rated = document.querySelector('#show-page .rated p')\n            const duration = document.querySelector('#show-page .duration p')\n            const plot = document.querySelector('#show-page .plot p')\n\n            rating.innerHTML = movieInDatabase.Rating\n            genre.innerHTML = movieInDatabase.Genre\n            releaseDate.innerHTML = movieInDatabase.Released\n            director.innerHTML = movieInDatabase.Director\n            rated.innerHTML = movieInDatabase.Rated\n            duration.innerHTML = movieInDatabase.Runtime\n            plot.innerHTML = movieInDatabase.Plot \n        })\n    })\n\n    showPageControls()\n}\n\n//-------------------------------------------------------------\n// SHOW PAGE CONTROLS\n\nconst showPageControls = () => {\n    const watchedMovies = document.querySelectorAll('.watched-movies div')\n    const movies = JSON.parse(localStorage.getItem('movies')) \n\n    // find which movie was clicked on in the local storage\n    watchedMovies.forEach((watchedMovie) => {\n        watchedMovie.addEventListener('click', () => {\n            movies.forEach((movie) => {\n                if (movie.imdbID === watchedMovie.getAttribute('id')) {\n\n                    // cancel and delete button functions\n                    const pageContents = document.querySelectorAll('[data-page-content]')\n                    const buttonContainer = document.querySelector('#show-page .button-container')\n                    buttonContainer.classList.remove('active')\n                \n                    const backBtn = document.querySelector('#show-page .back-btn')\n\n                    backBtn.addEventListener('click', () => {\n                        pageContents.forEach((page) => {\n                        page.classList.remove('active')\n                        })\n\n                        const mainPage = document.querySelector('#main-page')\n                        mainPage.classList.add('active')\n                    })\n                \n                    const deleteBtn = document.querySelector('#show-page .delete-btn')\n\n                    deleteBtn.addEventListener('click', () => {\n                        showDeleteConfirmation(movie)\n                    })\n                }\n            })\n            \n        })\n    }) \n}\n\n//-------------------------------------------------------------\n// SHOW DELETE CONFIRMATION MODAL\n\nlet handleConfirmClick;\n\nconst showDeleteConfirmation = (movie) => {\n\n    const deleteModal = document.querySelector('#delete-modal')\n    deleteModal.classList.add('active')\n\n    const buttonContainer = document.querySelector('#show-page .button-container')\n    buttonContainer.classList.add('active')\n\n    const cancelBtn = document.querySelector('#delete-modal .cancel-btn')\n\n    cancelBtn.addEventListener('click', () => {\n        buttonContainer.classList.remove('active')\n\n        const modal = document.querySelector('#delete-modal')\n        modal.classList.remove('active')\n    })\n\n    const confirmBtn = document.querySelector('#delete-modal .confirm-btn')\n\n    // ensures that 1 event listener is only active at a time\n    if(typeof handleConfirmClick === 'function'){\n        confirmBtn.removeEventListener('click', handleConfirmClick);\n    }\n    \n    handleConfirmClick = () => deleteMovie(movie);\n    confirmBtn.addEventListener('click', handleConfirmClick);\n}\n\n//-------------------------------------------------------------\n// DELETE MOVIE\n\nconst deleteMovie = (movie) => {\n\n    const pageContents = document.querySelectorAll('[data-page-content]')\n    pageContents.forEach((page) => {\n        page.classList.remove('active')\n    })\n\n    const movies = JSON.parse(localStorage.getItem('movies'))\n    const movieIndex = movies.findIndex((movieItem) => movieItem.imdbID === movie.imdbID)\n    \n    // remove movie from local storage\n    if (movieIndex !== -1) {\n        // Remove the movie from the array\n        movies.splice(movieIndex, 1)\n        localStorage.setItem('movies', JSON.stringify(movies))\n    } \n\n    // remove movie from DOM\n    const watchedMovies = document.querySelectorAll('.watched-movies div')\n    watchedMovies.forEach((watchedMovie) => {\n        if (watchedMovie.getAttribute('id') === movie.imdbID) {\n            watchedMovie.remove()\n\n            // update the tracker\n            totalMovies--\n            totalTime -= parseInt(movie.Runtime)\n            updateTracker(totalMovies, totalTime)\n        }\n    })\n    \n\n    const modal = document.querySelector('#delete-modal')\n    modal.classList.remove('active')\n  \n    const mainPage = document.querySelector('#main-page')\n    mainPage.classList.add('active') \n}"],"names":["$295cb799eb763085$var$totalMovies","$295cb799eb763085$var$totalTime","window","addEventListener","$295cb799eb763085$var$reloadPage","$295cb799eb763085$var$form","document","querySelector","event","preventDefault","movieTitle","rating","url","encodeURIComponent","fetch","then","response","ok","json","Error","status","data","Poster","inputContainer","p","createElement","innerHTML","appendChild","setTimeout","remove","Rating","movies","JSON","parse","localStorage","getItem","some","movie","Title","console","log","push","parseInt","Runtime","$295cb799eb763085$var$updateTracker","setItem","stringify","$295cb799eb763085$var$displayMovie","$295cb799eb763085$var$displayShowPage","catch","error","$295cb799eb763085$var$getApiResponse","value","reset","focus","$295cb799eb763085$var$createMovie","watchedMovies","watchedMoviesList","querySelectorAll","Array","from","watchedMovie","getAttribute","imdbID","div","classList","add","setAttribute","img","src","alt","title","forEach","$295cb799eb763085$var$showPageControls","time","slice","pageContents","movieInDatabase","movieId","target","dataset","movieTarget","page","content","figcaption","genre","releaseDate","director","rated","duration","plot","Genre","Released","Director","Rated","Plot","$295cb799eb763085$var$showDeleteConfirmation","$295cb799eb763085$var$handleConfirmClick","buttonContainer","confirmBtn","removeEventListener","$295cb799eb763085$var$deleteMovie","movieIndex","findIndex","movieItem","splice"],"version":3,"file":"index.33da65fa.js.map"}