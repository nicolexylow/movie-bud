{"mappings":"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","sources":["public/script.js"],"sourcesContent":["// global variable shared across functions\nlet totalMovies = 0\nlet totalTime = 0\nlet manualInput = false\n\n// everytime the page is refreshed, the movies stay on the page\nwindow.addEventListener('load', () => {\n    reloadPage()\n})\n\n//-------------------------------------------------------------\n// API IMPLEMENTATION\nconst getApiResponse = (movieTitle, rating) => {\n    const apiKey = '3defedc0' \n    const baseUrl = 'http://www.omdbapi.com/'\n    const url = `${baseUrl}?apikey=${apiKey}&t=${encodeURIComponent(movieTitle)}`\n\n    fetch(url)\n    .then(response => {\n        if (response.ok) {\n            return response.json()\n        } else {\n            throw new Error('Request failed with status code: ' + response.status)\n        }\n    })\n    .then((data) => {\n        // check to see if the data has a poster\n        if (data.Poster === 'N/A' || data.Response === 'False') {\n            createInputs()\n            manualInput = true\n\n            return\n\n        } else {\n            // output the data to the watched movies list\n            data.Rating = rating\n            let movies = JSON.parse(localStorage.getItem('movies'))\n\n            if (movies == null) {\n                movies = [data]\n            } else {\n                if (movies.some(movie => movie.Title === data.Title)) {\n                    console.log('Movie already in watched list')\n                } else {\n                    movies.push(data)\n\n                    // update the tracker\n                    totalMovies++\n                    totalTime += parseInt(data.Runtime)\n                    updateTracker(totalMovies, totalTime)\n                }\n            } \n\n            localStorage.setItem('movies', JSON.stringify(movies))\n\n            displayMovie() \n            displayShowPage()\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error)\n    })\n}\n\n//-------------------------------------------------------------\n// MANUAL INPUT RESPONSE\nconst getManualResponse = () => {\n    const title = document.querySelector('input[name=\"title\"]').value\n    const rating = document.querySelector('#rating').value\n    const image = document.querySelector('input[name=\"image\"]').value\n    const releaseDate = document.querySelector('input[name=\"release-date\"]').value\n    const duration = document.querySelector('input[name=\"duration\"]').value\n    const rated = document.querySelector('input[name=\"rated\"]').value\n    const genre = document.querySelector('input[name=\"genre\"]').value\n    const director = document.querySelector('input[name=\"director\"]').value\n    const plot = document.querySelector('textarea[name=\"plot\"]').value\n    \n    // place manual id into local storage\n    let manualId = JSON.parse(localStorage.getItem('manualId'))\n\n    if (manualId === null) {\n        manualId = 1\n    } else {\n        manualId = parseInt(manualId)\n        manualId++\n    } \n\n    // convert date to correct format\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n\n    const dateArr = releaseDate.split(\"-\");\n    const date = dateArr[2] + \" \" + months[Number(dateArr[1]) - 1] + \" \" + dateArr[0]\n\n    // put into database\n    let movies = JSON.parse(localStorage.getItem('movies'))\n\n    const movie = {\n        Title: title, Rating: rating, Poster: image, Released: date, Runtime: `${duration} min`, \n        Rated: rated, Genre: genre, Director: director, Plot: plot, imdbID: manualId.toString()\n    }\n    if (movies === null) {\n        movies = [movie]\n    } else {\n        if (movies.some(movie => movie.Title === title)) {\n            console.log('Movie already in watched list')\n        } else {\n            movies.push(movie)\n\n            // update the tracker\n            totalMovies++\n            totalTime += parseInt(duration)\n            updateTracker(totalMovies, totalTime)\n        }\n        \n    }\n    localStorage.setItem('movies', JSON.stringify(movies))\n    localStorage.setItem('manualId', JSON.stringify(manualId))\n\n    clearManualInputs()\n    const form = document.querySelector('form')\n    form.reset()\n\n    // focus on the title input after the form is submitted\n    const titleInput = document.querySelector('input[name=\"title\"]')\n    titleInput.focus()\n\n    displayMovie()\n    displayShowPage()\n}\n\n\n//-------------------------------------------------------------\n// INPUT AND API RESPONSE\n\nconst form = document.querySelector('form')\n\nform.addEventListener('submit', (event) => {\n    event.preventDefault()\n\n    const title = document.querySelector('input[name=\"title\"]').value\n    const rating = document.querySelector('#rating').value\n\n    if (manualInput) {\n        getManualResponse()\n        manualInput = false\n        return\n    } else {\n        getApiResponse(title, rating)\n    }\n\n    form.reset()\n\n    // focus on the title input after the form is submitted\n    const titleInput = document.querySelector('input[name=\"title\"]')\n    titleInput.focus()\n})\n\n//-------------------------------------------------------------\n// CLEAR MANUAL INPUTS\n\nconst clearManualInputs = () => {\n    const inputContainer = document.querySelector('.input-container')\n            \n    if (inputContainer.children.length > 2) {\n        for (let i = 0; i < 7; i++) {\n            inputContainer.lastChild.remove()\n        }\n    }\n\n    // clear error message\n    const errorMessage = document.querySelector('.input-container p')\n    errorMessage.remove()\n}\n\n//-------------------------------------------------------------\n// CREATE MANUAL INPUTS\n\nconst createInputs = () => {\n    const inputContainer = document.querySelector('.input-container')\n\n    // ensures that another set of inputs do not get appended\n    if (document.querySelector('input[name=\"image\"]')) {\n        return\n    }\n\n    // image\n    const imageLabel = document.createElement('label')\n    imageLabel.classList.add('input-image')\n    imageLabel.innerHTML = 'Image'\n    const imageInput = document.createElement('input')\n    imageInput.setAttribute('type', 'url')\n    imageInput.setAttribute('name', 'image')\n    imageInput.setAttribute('placeholder', 'https://www.example.com/image.jpg')\n    imageInput.setAttribute('required', '')\n    imageLabel.appendChild(imageInput)\n    inputContainer.append(imageLabel)\n\n    // release date\n    const releaseDateLabel = document.createElement('label')\n    releaseDateLabel.classList.add('input-release-date')\n    releaseDateLabel.innerHTML = 'Release Date'\n    const releaseDateInput = document.createElement('input')\n    releaseDateInput.setAttribute('type', 'date')\n    releaseDateInput.setAttribute('name', 'release-date')\n    releaseDateInput.setAttribute('required', '')\n    releaseDateLabel.appendChild(releaseDateInput)\n    inputContainer.append(releaseDateLabel)\n\n    // duration\n    const durationLabel = document.createElement('label')\n    durationLabel.classList.add('input-duration')\n    durationLabel.innerHTML = 'Duration (min)'\n    const durationInput = document.createElement('input')\n    durationInput.setAttribute('type', 'number')\n    durationInput.setAttribute('name', 'duration')\n    durationInput.setAttribute('placeholder', '126')\n    durationInput.setAttribute('required', '')\n    durationLabel.appendChild(durationInput)\n    inputContainer.append(durationLabel)\n    \n    // rated\n    const ratedLabel = document.createElement('label')\n    ratedLabel.classList.add('input-rated')\n    ratedLabel.innerHTML = 'Rated'\n    const ratedInput = document.createElement('input')\n    ratedInput.setAttribute('type', 'text')\n    ratedInput.setAttribute('name', 'rated')\n    ratedInput.setAttribute('placeholder', 'PG-13')\n    ratedInput.setAttribute('required', '')\n    ratedLabel.appendChild(ratedInput)\n    inputContainer.append(ratedLabel)\n\n    // genre\n    const genreLabel = document.createElement('label')\n    genreLabel.classList.add('input-genre')\n    genreLabel.innerHTML = 'Genre'\n    const genreInput = document.createElement('input')\n    genreInput.setAttribute('type', 'text')\n    genreInput.setAttribute('name', 'genre')\n    genreInput.setAttribute('placeholder', 'Action, Adventure')\n    genreInput.setAttribute('required', '')\n    genreLabel.appendChild(genreInput)\n    inputContainer.append(genreLabel)\n\n    // director\n    const directorLabel = document.createElement('label')\n    directorLabel.classList.add('input-director')\n    directorLabel.innerHTML = 'Director'\n    const directorInput = document.createElement('input')\n    directorInput.setAttribute('type', 'text')\n    directorInput.setAttribute('name', 'director')\n    directorInput.setAttribute('placeholder', 'Tim Burton')\n    directorInput.setAttribute('required', '')\n    directorLabel.appendChild(directorInput)\n    inputContainer.append(directorLabel)\n\n    // plot\n    const plotLabel = document.createElement('label')\n    plotLabel.classList.add('input-plot')\n    plotLabel.innerHTML = 'Plot'\n    const plotInput = document.createElement('textarea')\n    plotInput.setAttribute('name', 'plot')\n    plotInput.setAttribute('placeholder', 'Short description of the movie')\n    plotInput.setAttribute('required', '')\n    plotLabel.appendChild(plotInput)\n    inputContainer.append(plotLabel)\n\n    // error message\n    const errorMessage = document.createElement('p')\n    errorMessage.innerHTML = 'Movie not found. Please manually input.'\n    inputContainer.prepend(errorMessage)\n}\n\n//-------------------------------------------------------------\n// CREATE IMAGE POSTER AND TITLE \n\nconst createMovie = (movie) => {\n    \n    const watchedMovies = document.querySelector('.watched-movies')\n    const watchedMoviesList = document.querySelectorAll('.watched-movies div')\n\n    // check to see if the movie already exists in the DOM\n    let watchedMoviesArray = Array.from(watchedMoviesList)\n    let movieExists = watchedMoviesArray.some((watchedMovie) => watchedMovie.getAttribute('id') === movie.imdbID)\n\n    let manualId = JSON.parse(localStorage.getItem('manualId'))\n\n    if (!movieExists) {\n        const div = document.createElement('div')\n        div.classList.add('movie')\n\n        if (manualInput) {\n            div.setAttribute('id', manualId)\n        } else {\n            div.setAttribute('id', movie.imdbID)\n        }\n        div.setAttribute('data-movie-target', '#show-page')\n        div.classList.add('active')\n\n        const img = document.createElement('img')\n        img.classList.add('movie-poster')\n        img.src = movie.Poster\n        img.alt = `${movie.Title} poster`\n\n        const title = document.createElement('h4')\n        title.innerHTML = movie.Title\n\n        div.appendChild(img)\n        div.appendChild(title)\n        watchedMovies.appendChild(div)\n    } \n}\n\n//-------------------------------------------------------------\n// RELOAD PAGE \n\nconst reloadPage = () => {\n    const movies = JSON.parse(localStorage.getItem('movies'))\n    const watchedMovies = document.querySelector('.watched-movies')\n    \n    // reset tracker\n    totalMovies = 0\n    totalTime = 0\n\n    if (movies !== null) {\n        movies.forEach((movie) => {\n            createMovie(movie)\n            totalMovies++\n            totalTime += parseInt(movie.Runtime)\n        })\n    }\n\n    updateTracker(totalMovies, totalTime)\n    displayShowPage()\n    showPageControls()\n}\n\n//-------------------------------------------------------------\n// UPDATE THE TRACKER INFO\n\nconst updateTracker = (movies, time) => {\n    const numMovies = document.querySelector('.num-movies p')\n    numMovies.innerHTML = movies\n\n    const watchTime= document.querySelector('.watch-time p')\n    watchTime.innerHTML = time\n}\n\n//-------------------------------------------------------------\n// DISPLAY THE MOVIES\n\nconst displayMovie = () => {\n    const movies = JSON.parse(localStorage.getItem('movies'))\n    const movie = movies.slice(-1)[0]\n\n    createMovie(movie)\n}\n\n//-------------------------------------------------------------\n// DISPLAY MOVIE SHOW PAGE\n\nconst displayShowPage = () => {\n\n    // find which movie has been clicked on\n    const watchedMovies = document.querySelectorAll('.watched-movies div')\n    const pageContents = document.querySelectorAll('[data-page-content]')\n    const movies = JSON.parse(localStorage.getItem('movies')) \n    let movieInDatabase = ''\n\n    watchedMovies.forEach((movie) => {\n        movie.addEventListener('click', () => {\n\n            const movieId = movie.getAttribute('id')\n            movies.forEach((movie) => {\n                if (movie.imdbID === movieId) {\n                    movieInDatabase = movie\n                }\n            })\n            \n            const target = document.querySelector(movie.dataset.movieTarget)\n\n            pageContents.forEach((page) => {\n                page.classList.remove('active')\n            })\n\n            target.classList.add('active')\n\n            // specific show page based on the movie clicked\n            const content = document.querySelector('#show-page .img-title')\n            const img = document.createElement('img')\n\n            // delete the previous append to parent HTML element\n            content.innerHTML = ''\n\n            if (manualInput) {\n\n\n            } else {\n                img.src = movieInDatabase.Poster\n                img.alt = `${movieInDatabase.Title} Poster`\n                const h2 = document.createElement('h2')\n                h2.innerHTML = movieInDatabase.Title\n                content.appendChild(h2)\n                content.appendChild(img)\n\n                const rating = document.querySelector('#show-page .rating p')\n                const genre = document.querySelector('#show-page .genre p')\n                const releaseDate = document.querySelector('#show-page .release-date p')\n                const director = document.querySelector('#show-page .director p')\n                const rated = document.querySelector('#show-page .rated p')\n                const duration = document.querySelector('#show-page .duration p')\n                const plot = document.querySelector('#show-page .plot p')\n\n                rating.innerHTML = movieInDatabase.Rating\n                genre.innerHTML = movieInDatabase.Genre\n                releaseDate.innerHTML = movieInDatabase.Released\n                director.innerHTML = movieInDatabase.Director\n                rated.innerHTML = movieInDatabase.Rated\n                duration.innerHTML = movieInDatabase.Runtime\n                plot.innerHTML = movieInDatabase.Plot \n            }\n        })\n    })\n\n    showPageControls()\n}\n\n//-------------------------------------------------------------\n// SHOW PAGE CONTROLS\n\nconst showPageControls = () => {\n    const watchedMovies = document.querySelectorAll('.watched-movies div')\n    const movies = JSON.parse(localStorage.getItem('movies')) \n\n    // find which movie was clicked on in the local storage\n    watchedMovies.forEach((watchedMovie) => {\n        watchedMovie.addEventListener('click', () => {\n            movies.forEach((movie) => {\n                if (movie.imdbID === watchedMovie.getAttribute('id')) {\n\n                    // cancel and delete button functions\n                    const pageContents = document.querySelectorAll('[data-page-content]')\n                    const buttonContainer = document.querySelector('#show-page .button-container')\n                    buttonContainer.classList.remove('active')\n                \n                    const backBtn = document.querySelector('#show-page .back-btn')\n\n                    backBtn.addEventListener('click', () => {\n                        pageContents.forEach((page) => {\n                        page.classList.remove('active')\n                        })\n\n                        const mainPage = document.querySelector('#main-page')\n                        mainPage.classList.add('active')\n                    })\n                \n                    const deleteBtn = document.querySelector('#show-page .delete-btn')\n\n                    deleteBtn.addEventListener('click', () => {\n                        showDeleteConfirmation(movie)\n                    })\n                }\n            })\n            \n        })\n    }) \n}\n\n//-------------------------------------------------------------\n// SHOW DELETE CONFIRMATION MODAL\n\nlet handleConfirmClick;\n\nconst showDeleteConfirmation = (movie) => {\n\n    const deleteModal = document.querySelector('#delete-modal')\n    deleteModal.classList.add('active')\n\n    const buttonContainer = document.querySelector('#show-page .button-container')\n    buttonContainer.classList.add('active')\n\n    const cancelBtn = document.querySelector('#delete-modal .cancel-btn')\n\n    cancelBtn.addEventListener('click', () => {\n        buttonContainer.classList.remove('active')\n\n        const modal = document.querySelector('#delete-modal')\n        modal.classList.remove('active')\n    })\n\n    const confirmBtn = document.querySelector('#delete-modal .confirm-btn')\n\n    // ensures that 1 event listener is only active at a time\n    if(typeof handleConfirmClick === 'function'){\n        confirmBtn.removeEventListener('click', handleConfirmClick);\n    }\n    \n    handleConfirmClick = () => deleteMovie(movie);\n    confirmBtn.addEventListener('click', handleConfirmClick);\n}\n\n//-------------------------------------------------------------\n// DELETE MOVIE\n\nconst deleteMovie = (movie) => {\n\n    const pageContents = document.querySelectorAll('[data-page-content]')\n    pageContents.forEach((page) => {\n        page.classList.remove('active')\n    })\n\n    const movies = JSON.parse(localStorage.getItem('movies'))\n    const movieIndex = movies.findIndex((movieItem) => movieItem.imdbID === movie.imdbID)\n    \n    // remove movie from local storage\n    if (movieIndex !== -1) {\n        // Remove the movie from the array\n        movies.splice(movieIndex, 1)\n        localStorage.setItem('movies', JSON.stringify(movies))\n    } \n\n    // remove movie from DOM\n    const watchedMovies = document.querySelectorAll('.watched-movies div')\n    watchedMovies.forEach((watchedMovie) => {\n        if (watchedMovie.getAttribute('id') === movie.imdbID) {\n            watchedMovie.remove()\n\n            // update the tracker\n            totalMovies--\n            totalTime -= parseInt(movie.Runtime)\n            updateTracker(totalMovies, totalTime)\n        }\n    })\n    \n\n    const modal = document.querySelector('#delete-modal')\n    modal.classList.remove('active')\n  \n    const mainPage = document.querySelector('#main-page')\n    mainPage.classList.add('active') \n}"],"names":["$295cb799eb763085$var$totalMovies","$295cb799eb763085$var$totalTime","$295cb799eb763085$var$manualInput","window","addEventListener","$295cb799eb763085$var$reloadPage","$295cb799eb763085$var$form","document","querySelector","event","preventDefault","title","value","rating","image","releaseDate","duration","rated","genre","director","plot","manualId","JSON","parse","localStorage","getItem","parseInt","dateArr","split","date","Number","movies","movie","Title","Rating","Poster","Released","Runtime","Rated","Genre","Director","Plot","imdbID","toString","some","console","log","push","$295cb799eb763085$var$updateTracker","setItem","stringify","$295cb799eb763085$var$clearManualInputs","reset","focus","$295cb799eb763085$var$displayMovie","$295cb799eb763085$var$displayShowPage","$295cb799eb763085$var$getManualResponse","movieTitle","url","encodeURIComponent","fetch","then","response","ok","json","Error","status","data","Response","$295cb799eb763085$var$createInputs","catch","error","$295cb799eb763085$var$getApiResponse","inputContainer","children","length","i","lastChild","remove","imageLabel","createElement","classList","add","innerHTML","imageInput","setAttribute","appendChild","append","releaseDateLabel","releaseDateInput","durationLabel","durationInput","ratedLabel","ratedInput","genreLabel","genreInput","directorLabel","directorInput","plotLabel","plotInput","errorMessage","prepend","$295cb799eb763085$var$createMovie","watchedMovies","watchedMoviesList","querySelectorAll","movieExists","Array","from","watchedMovie","getAttribute","div","img","src","alt","forEach","$295cb799eb763085$var$showPageControls","time","slice","pageContents","movieInDatabase","movieId","target","dataset","movieTarget","page","content","h2","$295cb799eb763085$var$showDeleteConfirmation","$295cb799eb763085$var$handleConfirmClick","buttonContainer","confirmBtn","removeEventListener","$295cb799eb763085$var$deleteMovie","movieIndex","findIndex","movieItem","splice"],"version":3,"file":"index.f1ed27fd.js.map"}